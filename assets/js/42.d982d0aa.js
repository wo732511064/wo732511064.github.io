(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{351:function(r,t,e){"use strict";e.r(t);var s=e(0),a=Object(s.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h2",{attrs:{id:"ssr简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssr简介"}},[r._v("#")]),r._v(" SSR简介")]),r._v(" "),e("p",[r._v("在前端开发中我们通过使用框架搭建前端html页面，直接生成DOM并提供给浏览器渲染。然而，也可以通过把整个html模板转化为服务器端html字符串，将它们直接发送到浏览器渲染。")]),r._v(" "),e("h2",{attrs:{id:"ssr优劣势-官方"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssr优劣势-官方"}},[r._v("#")]),r._v(" SSR优劣势(官方)")]),r._v(" "),e("p",[r._v("与传统到SPA(单页面应用)相比，SSR体现在于：")]),r._v(" "),e("ol",[e("li",[r._v("优势：")])]),r._v(" "),e("ul",[e("li",[r._v("更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。\n::: Tip\n请注意，截至目前，Google 和 Bing 可以很好对同步 JavaScript 应用程序进行索引。在这里，同步是关键。如果你的应用程序初始展示 loading 菊花图，然后通过 Ajax 获取内容，抓取工具并不会等待异步完成后再行抓取页面内容。也就是说，如果 SEO 对你的站点至关重要，而你的页面又是异步获取内容，则你可能需要服务器端渲染(SSR)解决此问题。\n:::")]),r._v(" "),e("li",[r._v("更快的内容到达时间 (time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备。无需等待所有的 JavaScript 都完成下载并执行，才显示服务器渲染的标记，所以你的用户将会更快速地看到完整渲染的页面。通常可以产生更好的用户体验，并且对于那些「内容到达时间(time-to-content) 与转化率直接相关」的应用程序而言，服务器端渲染 (SSR) 至关重要。")])]),r._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[r._v("缺点：")])]),r._v(" "),e("ul",[e("li",[e("p",[r._v("开发条件所限。浏览器特定的代码，只能在某些生命周期钩子函数 (lifecycle hook) 中使用；一些外部扩展库 (external library) 可能需要特殊处理，才能在服务器渲染应用程序中运行。")])]),r._v(" "),e("li",[e("p",[r._v("涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序 (SPA) 不同，服务器渲染应用程序，需要处于 Node.js server 运行环境。")])]),r._v(" "),e("li",[e("p",[r._v("更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 (high traffic) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。")])])]),r._v(" "),e("h2",{attrs:{id:"服务器端渲染-vs-预渲染-ssr-vs-prerendering-官方"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器端渲染-vs-预渲染-ssr-vs-prerendering-官方"}},[r._v("#")]),r._v(" 服务器端渲染 vs 预渲染 (SSR vs Prerendering)(官方)")]),r._v(" "),e("p",[r._v("如果你调研服务器端渲染 (SSR) 只是用来改善少数营销页面（例如 /, /about, /contact 等）的 SEO，那么你可能需要预渲染。无需使用 web 服务器实时动态编译 HTML，而是使用预渲染方式，在构建时 (build time) 简单地生成针对特定路由的静态 HTML 文件。优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点。\n如果你使用 webpack，你可以使用 "),e("a",{attrs:{href:"https://github.com/chrisvfritz/prerender-spa-plugin",target:"_blank",rel:"noopener noreferrer"}},[r._v("prerender-spa-plugin"),e("OutboundLink")],1),r._v(" 轻松地添加预渲染。")]),r._v(" "),e("h2",{attrs:{id:"扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[r._v("#")]),r._v(" 扩展")]),r._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://ssr.vuejs.org/zh",target:"_blank",rel:"noopener noreferrer"}},[r._v("服务端渲染-官方"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/weixin_33809981/article/details/93656246",target:"_blank",rel:"noopener noreferrer"}},[r._v("开发中遇到的一些问题"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);